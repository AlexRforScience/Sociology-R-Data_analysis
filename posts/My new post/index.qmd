---
title: "Введение в азы Quarto"
author: "Мелихов Александр"
image: "531502-tyan-8.jpg"
format:
  html:
    code-fold: true
    code-summary: Раскрыть код
editor: visual
lang: ru
toc: true
number-sections: true
crossref:
  chapters: false
execute: 
  warning: false
  message: fals
---


# Таблица

В Markdown не очень удобно вручную создавать таблицу, так что воспользуемся возможностями Visual в верхней панеле Rstudio

Внутри мы можем задать необходимое количество строк и колонок, а затем вручную их заполнить.

| Колонка 1 | Колонка 2 |
|-----------|-----------|
| 1         | 2         |
| 3         | 4         |
| 5         | 6         |
| 7         | 8         |

: **Тест таблицы**

Таблицу можно пронумеровать, изменить текст, изменить размер колонок, вставить ссылки, сослаться на таблицу в тексте.

## Нумерация таблицы

Нумерация таблицы происходит с помощью открытия фигурных скоробок после заголовка таблицы, где необходимо указать решетку, поставить тире и написать название таблицы. В нашем случае код после заголока будет выглядить так `{#tbl-table}.`

| Колонка 1 | Колонка 2 |
|-----------|-----------|
| 1         | 2         |
| 3         | 4         |
| 5         | 6         |
| 7         | 8         |

: **Тест таблицы** {#tbl-table}

## Ширина таблицы

Ширина таблицы, к сожалению, не меняется в Visual, хотя вручную ее можно изменить, и визуально это и произойдет, но осуществив Render ничего не поменяется, что можно заметить и после перехода из Visual В Source.

Ширина таблицы в Quarto меняется с помощью ручного редактирования в Source. После заголовка таблицы в фигурных скобках (если они уже открыты, например, для нумерации, то новые открывать не нужно) прописывается следующий код `tbl-colwidths="[80, 20]"` . Где цифры, это процентные значения ширины для колонок (первая и вторая соответственно).

| Колонка 1 | Колонка 2 |
|-----------|-----------|
| 1         | 2         |
| 3         | 4         |
| 5         | 6         |
| 7         | 8         |

: **Тест таблицы** {#tbl-table tbl-colwidths="\[80, 20\]"}

Соответственно, порядок цифр, указывающих ширину колонок, сохраняется и для нескольких колонок.

| Колонка 1 | Колонка 2 | Колонка 3 | Колонка 4 |
|:---------:|-----------|-----------|-----------|
|     1     | 2         | 3         | 4         |
|     5     | 6         | 7         | 8         |
|     9     | 10        | 11        | 12        |
|    13     | 14        | 15        | 16        |
|    17     | 18        | 19        | 20        |

: Таблица для примера {#tbl-table2 tbl-colwidths="\[70, 10, 10, 10\]"}

# Картинки {#sec-Anime}

![](images/531502-tyan-8.jpg){#fig-Anime width="501" fig-align="center"}

В ID картинки нужно перед названием не забыть поставить `#`.

Выравнивание происходит через `fig-align=""` , для того, чтобы выравнять по центру, нужно указать `fig-align="center"` . Аналогично с таблицами, данную строчку кода указываем в фигурных скобках, в которых содержится название самой картинки. Размеры картинки можно менять вручную в Visual, а можно указывать конкретные количества пикселей по ширине и высоте, на эта загрузки самой картинки.

# Как сослаться на таблицу, картинку и тд?

Чтобы сослаться на картинку нужно в фигурных скобках, где содержится название картинки, указать `fig-` , после чего указываем `@fig-название_картинки` . Таким образом, я могу сослаться на аниме девочку, например сказав "посмотреть на оторву можно на @fig-Anime ". Но фраза Рисунок 1 не всегда нам подходит. Чтобы указать номер рисунка, нужно выполнить следующий код \[-`@fig-название_картинки]` . Так, можно сказать, что "посмотреть на оторву можно на рисунке [-@fig-Anime] ". Либо можно в квадратные скобки указать свое слово, например \[рис. `@fig-название_картинки]` , что даст нам [рис. @fig-Anime].

Такие же способы аналогичны и для таблицы, однако можно просто указать `@tbl-название_таблицы` для @tbl-table, или `[Табл. @tbl-название_таблицы]` для [Табл. @tbl-table], или \[-\@tbl-название_таблицы\] для [-@tbl-table].

## Глобальные изменения

Мы можем поменять автоматические названия Рисунок 1 или Таблица 1 и тд с помощью указания в YAML crossref.

# Содержание

Содержание создается довольно легко, в YAML нужно указать следующий код

`toc: true`\
`number-sections: true`\
`crossref:`\
`chapters: true`\
где `toc: true` выводит само содержание, `number-sections: true` нумерует заголовки, `chapters:` `true` позволяет указывать, к какому именно параграфу принадлежит рисунок, таблица и т.д.

# Работа с кодом

Работа с кодом осуществляется с помощью чанков. Чанки прописиваются вручную как ```` ```{язык_программирования} ````\
`сам код`\
```` ```. ````

Rstudio позволяет создать чанк нажатием одной кнопки, более того, внутри можно выбрать специальные параметры, о которых более подробно будет рассказано ниже.

Пример использования.

```{r}
library(tidyverse)
library(plotly)
g <- ggplot(data = mtcars, aes(x = wt, y = mpg))+
  geom_point(mapping=aes(color = vs))+
  theme_classic()
ggplotly(g)
```

Анологично с рисунками и таблицами, мы можем ссылаться на код и его результаты. Для этого указываем #\| lable: fig-code; чтобы дать выводу кода название, указываем #\|fig-cap: Зависимость wt от mpg; соотношение рисунка #\| fig-asp: 0.6; высота #\|fig-height: 5; ширина #\| fig-wight: 7

```{r}
#| lable: fig-code
#| fig-cap: Зависимость wt от mpg
#| fig-asp: 0.6
#| fig-height: 5
#| fig-wight: 7
g <- ggplot(data = mtcars, aes(x = wt, y = mpg))+
  geom_point(mapping=aes(color = vs))+
  theme_classic()
ggplotly(g)
```

На глабальном уровне мы можем скрыть всё ненужное, например предупреждения (warning). Задается это в YAML с помощью `execute:`, где выбирает параметр (например) `warning:` и указываем `true` или `false`, чтобы скрить нужно выбрать `false`.

Чтобы свернуть код с возможностью его развернуть, нужно использовать #\| code-fold: true

```{r}
#| lable: fig-code
#| fig-cap: Зависимость wt от mpg
#| fig-asp: 0.6
#| fig-height: 5
#| fig-wight: 7
#| code-fold: true
g <- ggplot(data = mtcars, aes(x = wt, y = mpg))+
  geom_point(mapping=aes(color = vs))+
  theme_classic()
ggplotly(g)
```

На глобальном уровне это тоже можно осуществить. Для этого в YAML в `format:` выбираем функцию `html:`, где уже в `html:` выбираем функцию `code-fold: true`. Помимо этого, мы можем кастомизировать кнопку раскрытия кода, для этого в `html:` есть функция `code-summary:`, где нужно указать переименование кнопки, например `code-summary: Раскрыть код`.

```{r}
#| lable: fig-code
#| fig-cap: Зависимость wt от mpg
#| fig-asp: 0.6
#| fig-height: 5
#| fig-wight: 7
g <- ggplot(data = mtcars, aes(x = wt, y = mpg))+
  geom_point(mapping=aes(color = vs))+
  theme_classic()
ggplotly(g)
```

## Аннотирование кода

Для кода мы можем сделать так называемую пометку, что сможет давать некие пояснения для читателей. Делается это с помощью добавление к строчке кода `# <1>`, после чего необходимо ниже написать пояснения к конкретным строчкам кода.

```{r}
#| lable: fig-code_2
#| fig-cap: Ящики с усами
#| fig-asp: 0.6
#| fig-height: 5
#| fig-wight: 7
g <- ggplot(data = mtcars, aes(x = factor(vs), y = mpg))+
  geom_boxplot(color = "#7FFFD4")+
  theme_classic() # <1>
ggplotly(g)
```

1.  Тема графика, из-за нее у нас такой красивый белый фон.

## Включение кода в тексте

Очень удобно, что сами вычисления с помощью кода мы можем производить в самом тексте, таким образом вероятность ошибиться намного снижается. Чтобы это осуществить, нужно выполнить `` `язык_программирования код` `` , например можно рассчитать среднее переменной mpg из датафрейма mtcars, которое будет равняться `r mean(mtcars$mpg)`. Так же можно обращаться к заголовкам **{{**

<meta title>

**}**}.

::: callout-tip
# Совет

Quarto - это модно, стильно, молодежно!
:::
